{"version":3,"sources":["img/computer-icon.png","img/user.png","components/AnswersList.jsx","components/Answer.jsx","components/Chats.jsx","components/Chat.jsx","components/Forms/Textinput.jsx","components/Forms/FormDialog.jsx","firebase/config.js","firebase/index.js","App.jsx","index.js"],"names":["module","exports","AnswersList","props","className","answers","map","value","index","content","nextId","key","toString","select","useStyles","makeStyles","createStyles","borderColor","color","fontWeight","marginBottom","backgroundColor","Answer","classes","Button","button","variant","onClick","height","padding","overflow","Chats","List","chats","id","chat","text","type","Chat","isQuestion","ListItem","ListItemAvatar","Avatar","alt","src","Teacher","User","Textinput","TextField","fullWidth","label","margin","multiline","rows","onChange","FormDialog","inputName","event","setState","name","target","inputEmail","email","inputDescription","description","submitForm","payload","state","fetch","method","body","JSON","stringify","then","alert","handleClose","bind","Dialog","open","this","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","React","Component","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","db","firestore","App","useState","setAnswers","setChats","currentId","setCurrentId","dataset","setDataset","setOpen","displayNextQuestion","nextQuestionId","nextDataset","addChats","question","prevChats","handleClickOpen","useCallback","useEffect","a","initDataset","collection","get","snapshots","forEach","doc","data","scrollArea","document","getElementById","scrollTop","scrollHeight","selectedAnswer","test","createElement","href","click","setTimeout","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9a9ecdf8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/computer-icon.3786d5b8.png\";","module.exports = __webpack_public_path__ + \"static/media/user.a69029e0.png\";","import React from 'react';\nimport {Answer} from './index';\n\n\nconst AnswersList = (props) => {\n  return (\n    <div className=\"c-grid__answer\">\n      {props.answers.map((value, index) => {\n        return <Answer content={value.content} nextId={value.nextId} key={index.toString()} select={props.select} />\n      })}\n    </div>\n  );\n}\n\nexport default AnswersList","import React from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(() => (\n  createStyles({\n    \"button\": {\n      borderColor: '#red',\n      color: 'primary',\n      fontWeight: 600,\n      marginBottom: '8px',\n      \"&:hover\": {\n        backgroundColor: '#primary',\n        color: '#red'\n      }\n    }\n  })\n));\n \nconst Answer = (props) => {\n  const classes = useStyles();\n\n  return (\n  <Button className={classes.button} variant=\"outlined\" onClick={() => props.select(props.content, props.nextId)} >\n    {props.content}\n    </Button>\n  )\n}\n\nexport default Answer;","import React from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport {Chat} from './index';\n\n\nconst useStyles = makeStyles(() => (\n  createStyles({\n    \"chats\": {\n      height: 400,\n      padding: '0',\n      overflow: 'auto'\n    }\n  })\n));\n\nconst Chats = (props) => {\n  const classes = useStyles();\n\n  return (\n    <List className={classes.chats} id={\"scroll-area\"} >\n      {props.chats.map((chat, index) => {\n        return <Chat text={chat.text} type={chat.type} key={index.toString} />\n      })}\n    </List>\n  )\n}\n\nexport default Chats\n","import React from 'react'\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Teacher from '../img/computer-icon.png';\nimport User from '../img/user.png'\n\nconst Chat = (props) => {\n  const isQuestion = (props.type === 'question');\n  const classes = isQuestion ? 'p-chat__row' : 'p-chat__reverse';\n\n  return (\n    <ListItem>\n        <ListItemAvatar className={classes}>\n          {isQuestion ? (\n            <Avatar alt=\"icon\" src={Teacher} />\n          ) : (\n            <Avatar alt=\"icon\" src={User} />\n          )}\n          \n        </ListItemAvatar>\n        <div className=\"p-chat__bubble\">\n          {props.text}\n        </div>\n      </ListItem>\n  )\n}\n\nexport default Chat","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nconst Textinput = (props) => {\n  return (\n    <TextField\n      fullWidth={true}\n      label={props.label}\n      margin={\"dense\"}\n      multiline={props.multiline}\n      rows={props.rows}\n      value={props.value}\n      type={props.type}\n      onChange={props.onChange}\n    />\n  )\n}\n\nexport default Textinput","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Textinput from './Textinput';\n\nexport default class FormDialog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      email: \"\",\n      description: \"\"\n    }\n  \n    this.inputName = this.inputName.bind(this);\n    this.inputEmail = this.inputEmail.bind(this);\n    this.inputDescription = this.inputDescription.bind(this);\n  } \n\n  inputName = (event) => {\n    this.setState({name: event.target.value})\n  }\n\n  inputEmail = (event) => {\n    this.setState({email: event.target.value})\n  }\n\n  inputDescription = (event) => {\n    this.setState({description: event.target.value})\n  }\n\n  submitForm = () => {\n    const name = this.state.name\n    const email = this.state.email\n    const description = this.state.description\n\n    const payload = {\n      text: 'お問い合わせがありました\\n' + \n      'お名前：'　+ name + '\\n' +\n      'email：'　+ email + '\\n' +\n      'お問い合わせ内容：\\n' + description\n    }\n\n    const url = 'https://hooks.slack.com/services/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'\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    }).then(() => {\n      alert('送信が完了しました。追ってご連絡します！')\n      this.setState({ \n        name: \"\",\n        email: \"\",\n        description: \"\"\n      })\n      return this.props.handleClose()\n    })\n  } \n\n  render() {\n    return (\n      <Dialog\n        open={this.props.open}\n        onClose={this.props.handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">お問い合わせ</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <Textinput \n              label={\"お名前（必須）\"} multiline={false} rows={1} value={this.state.name} type={\"text\"} onChange={this.inputName} \n            />\n            <Textinput \n              label={\"メールアドレス（必須）\"} multiline={false} rows={1} value={this.state.email} type={\"email\"} onChange={this.inputEmail} \n            />\n            <Textinput \n              label={\"お問い合わせ内容（必須）\"} multiline={true} rows={5}    value={this.state.description} type={\"text\"} onChange={this.inputDescription} \n            />\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.handleClose} color=\"primary\">\n            Disagree\n          </Button>\n          <Button onClick={this.submitForm} color=\"primary\" autoFocus>\n            Agree\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n}\n\n","const firebaseConfig = {\n  apiKey: \"AIzaSyD5LjTkBVyRmrXhfrCTFVIR_EGsslMxazE\",\n  authDomain: \"chatbot-2625d.firebaseapp.com\",\n  databaseURL: \"https://chatbot-2625d.firebaseio.com\",\n  projectId: \"chatbot-2625d\",\n  storageBucket: \"chatbot-2625d.appspot.com\",\n  messagingSenderId: \"94865265367\",\n  appId: \"1:94865265367:web:5767bc6de16f661e469692\",\n  measurementId: \"G-74TRCKXEGL\"\n};\n\nexport default firebaseConfig","import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport firebaseConfig from \"./config\";\n\nfirebase.initializeApp(firebaseConfig);\nexport const db = firebase.firestore();","import React, {useState, useEffect, useCallback} from 'react';\nimport './assets/styles/style.css';\nimport {AnswersList, Chats} from './components/index';\nimport FormDialog from './components/Forms/FormDialog';\nimport {db} from './firebase/index';\n\n\nconst App = () => {\n  const [answers, setAnswers] = useState([]);\n  const [chats, setChats] = useState([]);\n  const [currentId, setCurrentId] = useState(\"init\");\n  const [dataset, setDataset] = useState({});\n  const [open, setOpen] = useState(false);\n\n  const displayNextQuestion = (nextQuestionId, nextDataset) => {\n    addChats({\n      text: nextDataset.question,\n      type: 'question'\n    })\n\n      setAnswers(nextDataset.answers)\n      setCurrentId(nextQuestionId)\n    }\n\n  const selectAnswer = (selectedAnswer, nextQuestionId) => {\n    switch(true) {\n      case (nextQuestionId === 'contact'):\n        handleClickOpen()\n        break;\n\n      case (/^https:.*/.test(nextQuestionId)):\n        const a = document.createElement('a');\n        a.href = nextQuestionId;\n        a.target = \"_blank\";\n        a.click();\n        break;\n\n      default:\n        addChats({\n          text: selectedAnswer,\n          type: 'answer'\n        })\n\n        setTimeout(() => displayNextQuestion(nextQuestionId, dataset[nextQuestionId]), 1000);\n        break;\n    }\n  }\n\n  const addChats = (chat) => {\n    setChats(prevChats => {\n      return [...prevChats, chat]\n    })\n  }\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = useCallback(() => {\n      setOpen(false)\n    }, [setOpen]);\n\n\n  useEffect(() => {\n    (async() => {\n      const initDataset = {};\n\n      await db.collection('questions').get().then(snapshots => {\n        snapshots.forEach(doc => {\n          const id = doc.id\n          const data = doc.data()\n          initDataset[id] = data\n        })\n      })\n\n      setDataset(initDataset);\n      displayNextQuestion(currentId, initDataset[currentId])\n    })()\n  }, [])\n\n  useEffect(() =>  {\n    const scrollArea = document.getElementById('scroll-area');\n    if (scrollArea) {\n      scrollArea.scrollTop = scrollArea.scrollHeight\n    }\n  })\n\n    return (\n      <section className=\"c-section\">\n        <div className=\"c-box\">\n          <Chats chats={chats} />\n          <AnswersList answers={answers} select={selectAnswer} />\n          <FormDialog open={open} handleClose={handleClose} />\n        </div>\n      </section>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/styles/style.css'\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// serviceWorker.unregister();\n"],"sourceRoot":""}